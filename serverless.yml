# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: lambdaecstaskscaling
# app and org for use with dashboard.serverless.com
app: lambdaecstaskscaling-app
org: markthill

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

provider:
  name: aws
  runtime: python3.8

# you can overwrite defaults here
#  stage: dev
#  region: us-east-1

# you can add statements to the Lambda function's IAM Role here
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "cloudwatch:*"
        - "dynamodb:*"
        - "sns:*"
        - "logs:*"
        - "ecs:*"
        - "events:*"
      Resource: "*"

# you can define service wide environment variables here
#  environment:
#    variable1: value1

# you can add packaging information here
package:
  exclude:
    - README.md
    - tmp/**

functions:
  scale_out:
    handler: handler.scale_out
    events:
      - sns:
          arn: !Ref EcsServiceScaleOutTopic
          topicName: ecs-service-scaling-out-topic
  scale_in:
    handler: handler.scale_in
    events:
      - sns:
          arn: !Ref EcsServiceScaleInTopic
          topicName: ecs-service-scaling-in-topic
  reset_alarm:
    handler: handler.reset_alarm

# AWS CloudFormation Resources
resources:
  Resources:
    EcsServiceScaleOutTopic:
      Type: AWS::SNS::Topic
      Properties:
        TopicName: ecs-service-scaling-out-topic
    EcsServiceScaleInTopic:
      Type: AWS::SNS::Topic
      Properties:
        TopicName: ecs-service-scaling-in-topic
  Outputs:
    EcsServiceScaleOutTopic:
      Description: "Scale out topic output"
      Value:
        Ref: EcsServiceScaleOutTopic
      Export:
        Name: ${self:service}:scale-out-sns
    EcsServiceScaleInTopic:
      Description: "Scale in topic output"
      Value:
        Ref: EcsServiceScaleInTopic
      Export:
        Name: ${self:service}:scale-in-sns


#Fn::ImportValue: {
#Fn::Sub: "${NetworkStackName}-SecurityGroupID"
#}

#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - http:
#          path: users/create
#          method: get
#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp
#      - alb:
#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/
#          priority: 1
#          conditions:
#            host: example.com
#            path: /hello

#    Define function environment variables here
#    environment:
#      variable2: value2

